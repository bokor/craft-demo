package main

import (
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"golang.org/x/net/http2"

	echoSwagger "github.com/swaggo/echo-swagger"

	_ "github.com/bokor/craft-demo/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/bokor/craft-demo/services"
)

// @title Craft Demo Reporting API
// @version 1.0
// @description A set of APIs for generating reports for the Craft Demo.
// @host localhost:8080
// @BasePath /api/v1
func main() {
	e := echo.New()

	// add middleware
	e.Use(middleware.CORS())
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	// Group level middleware
	g := e.Group("/admin")
	g.Use(middleware.BasicAuth(func(username, password string, c echo.Context) (bool, error) {
		if username == "joe" && password == "secret" {
			return true, nil
		}
		return false, nil
	}))
	e.Use(middleware.GzipWithConfig(middleware.GzipConfig{
		Skipper: func(c echo.Context) bool {
			if strings.Contains(c.Request().URL.Path, "swagger") {
				return true
			}
			return false
		},
	}))

	// add routes
	apiGroup := e.Group("/api/v1")
	apiGroup.GET("/swagger/*", echoSwagger.WrapHandler)

	apiGroup.GET("/", func(c echo.Context) error {
		return c.String(http.StatusOK, "Hello, World!")
	})

	apiGroup.GET("/sales/report/category", services.GetSalesReportByCategory)
	apiGroup.POST("/sales/forecast", services.GenerateSalesForecast)

	s := &http2.Server{
		MaxConcurrentStreams: 250,
		MaxReadFrameSize:     1048576,
		IdleTimeout:          10 * time.Second,
	}
	if err := e.StartH2CServer(":8080", s); err != http.ErrServerClosed {
		log.Fatal(err)
	}
}
