// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/sales/forecast": {
            "post": {
                "description": "Sends time series data to ChatGPT for forecasting and returns predicted values for daily, weekly, and monthly periods",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sales"
                ],
                "summary": "Generate sales forecast using ChatGPT",
                "parameters": [
                    {
                        "description": "Forecast request with time series data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.ForecastRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Forecast data with predicted values for all time periods",
                        "schema": {
                            "$ref": "#/definitions/services.ForecastResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/sales/report/category": {
            "get": {
                "description": "Returns aggregated sales data by date and category with calculated total amounts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sales"
                ],
                "summary": "Get sales report by category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date in YYYY-MM-DD format (defaults to 30 days ago)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date in YYYY-MM-DD format (defaults to today)",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sales report data with dates as keys and category arrays as values",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/services.CategoryTotal"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid date format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "services.CategoryTotal": {
            "type": "object",
            "properties": {
                "category_name": {
                    "type": "string"
                },
                "total_amount": {
                    "type": "number"
                }
            }
        },
        "services.ForecastRequest": {
            "type": "object",
            "properties": {
                "periodsToForecast": {
                    "type": "integer"
                },
                "timePeriod": {
                    "description": "TimePeriod is now optional - if not specified, all periods will be generated",
                    "type": "string"
                },
                "timeSeriesData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.TimeSeriesPoint"
                    }
                }
            }
        },
        "services.ForecastResponse": {
            "type": "object",
            "properties": {
                "forecast": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.TimeSeriesPoint"
                    }
                },
                "message": {
                    "type": "string"
                },
                "rawResponse": {
                    "type": "string"
                },
                "timePeriod": {
                    "type": "string"
                }
            }
        },
        "services.TimeSeriesPoint": {
            "type": "object",
            "properties": {
                "period": {
                    "type": "string"
                },
                "total": {
                    "type": "number"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Craft Demo Reporting API",
	Description:      "A set of APIs for generating reports for the Craft Demo.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
